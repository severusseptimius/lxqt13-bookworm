/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -m -p org.lxqt.global_key_shortcuts.native /home/debian/Lxqt1.3/lxqt-globalkeyes/lxqt-globalkeys-1.3.0/obj-x86_64-linux-gnu/client/org.lxqt.global_key_shortcuts.native.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef ORG_LXQT_GLOBAL_KEY_SHORTCUTS_NATIVE_H
#define ORG_LXQT_GLOBAL_KEY_SHORTCUTS_NATIVE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.lxqt.global_key_shortcuts.native
 */
class OrgLxqtGlobal_key_shortcutsNativeInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.lxqt.global_key_shortcuts.native"; }

public:
    OrgLxqtGlobal_key_shortcutsNativeInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OrgLxqtGlobal_key_shortcutsNativeInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QString, qulonglong> addClientAction(const QString &shortcut, const QDBusObjectPath &path, const QString &description)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(shortcut) << QVariant::fromValue(path) << QVariant::fromValue(description);
        return asyncCallWithArgumentList(QStringLiteral("addClientAction"), argumentList);
    }
    inline QDBusReply<QString> addClientAction(const QString &shortcut, const QDBusObjectPath &path, const QString &description, qulonglong &id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(shortcut) << QVariant::fromValue(path) << QVariant::fromValue(description);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("addClientAction"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            id = qdbus_cast<qulonglong>(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<> cancelShortcutGrab()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("cancelShortcutGrab"), argumentList);
    }

    inline QDBusPendingReply<QString> changeClientActionShortcut(const QDBusObjectPath &path, const QString &shortcut)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(path) << QVariant::fromValue(shortcut);
        return asyncCallWithArgumentList(QStringLiteral("changeClientActionShortcut"), argumentList);
    }

    inline QDBusPendingReply<bool> deactivateClientAction(const QDBusObjectPath &path)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(path);
        return asyncCallWithArgumentList(QStringLiteral("deactivateClientAction"), argumentList);
    }

    inline QDBusPendingReply<bool> enableClientAction(const QDBusObjectPath &path, bool enabled)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(path) << QVariant::fromValue(enabled);
        return asyncCallWithArgumentList(QStringLiteral("enableClientAction"), argumentList);
    }

    inline QDBusPendingReply<QString, bool, bool, bool> grabShortcut(uint timeout)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(timeout);
        return asyncCallWithArgumentList(QStringLiteral("grabShortcut"), argumentList);
    }
    inline QDBusReply<QString> grabShortcut(uint timeout, bool &failed, bool &cancelled, bool &timedout)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(timeout);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("grabShortcut"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 4) {
            failed = qdbus_cast<bool>(reply.arguments().at(1));
            cancelled = qdbus_cast<bool>(reply.arguments().at(2));
            timedout = qdbus_cast<bool>(reply.arguments().at(3));
        }
        return reply;
    }

    inline QDBusPendingReply<bool> isClientActionEnabled(const QDBusObjectPath &path)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(path);
        return asyncCallWithArgumentList(QStringLiteral("isClientActionEnabled"), argumentList);
    }

    inline QDBusPendingReply<bool> modifyClientAction(const QDBusObjectPath &path, const QString &description)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(path) << QVariant::fromValue(description);
        return asyncCallWithArgumentList(QStringLiteral("modifyClientAction"), argumentList);
    }

    inline QDBusPendingReply<bool> removeClientAction(const QDBusObjectPath &path)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(path);
        return asyncCallWithArgumentList(QStringLiteral("removeClientAction"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace org {
  namespace lxqt {
    namespace global_key_shortcuts {
      typedef ::OrgLxqtGlobal_key_shortcutsNativeInterface native;
    }
  }
}
#endif
