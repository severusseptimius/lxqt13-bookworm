/****************************************************************************
** Meta object code from reading C++ file 'org.lxqt.global_key_shortcuts.daemon.h'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.15.8)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <memory>
#include "org.lxqt.global_key_shortcuts.daemon.h"
#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'org.lxqt.global_key_shortcuts.daemon.h' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.15.8. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_OrgLxqtGlobal_key_shortcutsDaemonInterface_t {
    QByteArrayData data[73];
    char stringdata0[1398];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_OrgLxqtGlobal_key_shortcutsDaemonInterface_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_OrgLxqtGlobal_key_shortcutsDaemonInterface_t qt_meta_stringdata_OrgLxqtGlobal_key_shortcutsDaemonInterface = {
    {
QT_MOC_LITERAL(0, 0, 42), // "OrgLxqtGlobal_key_shortcutsDa..."
QT_MOC_LITERAL(1, 43, 11), // "actionAdded"
QT_MOC_LITERAL(2, 55, 0), // ""
QT_MOC_LITERAL(3, 56, 2), // "id"
QT_MOC_LITERAL(4, 59, 13), // "actionEnabled"
QT_MOC_LITERAL(5, 73, 7), // "enabled"
QT_MOC_LITERAL(6, 81, 14), // "actionModified"
QT_MOC_LITERAL(7, 96, 13), // "actionRemoved"
QT_MOC_LITERAL(8, 110, 21), // "actionShortcutChanged"
QT_MOC_LITERAL(9, 132, 14), // "actionsSwapped"
QT_MOC_LITERAL(10, 147, 3), // "id1"
QT_MOC_LITERAL(11, 151, 3), // "id2"
QT_MOC_LITERAL(12, 155, 25), // "clientActionSenderChanged"
QT_MOC_LITERAL(13, 181, 6), // "sender"
QT_MOC_LITERAL(14, 188, 31), // "multipleActionsBehaviourChanged"
QT_MOC_LITERAL(15, 220, 9), // "behaviour"
QT_MOC_LITERAL(16, 230, 16), // "addCommandAction"
QT_MOC_LITERAL(17, 247, 37), // "QDBusPendingReply<QString,qul..."
QT_MOC_LITERAL(18, 285, 8), // "shortcut"
QT_MOC_LITERAL(19, 294, 7), // "command"
QT_MOC_LITERAL(20, 302, 9), // "arguments"
QT_MOC_LITERAL(21, 312, 11), // "description"
QT_MOC_LITERAL(22, 324, 19), // "QDBusReply<QString>"
QT_MOC_LITERAL(23, 344, 11), // "qulonglong&"
QT_MOC_LITERAL(24, 356, 15), // "addMethodAction"
QT_MOC_LITERAL(25, 372, 7), // "service"
QT_MOC_LITERAL(26, 380, 15), // "QDBusObjectPath"
QT_MOC_LITERAL(27, 396, 4), // "path"
QT_MOC_LITERAL(28, 401, 9), // "interface"
QT_MOC_LITERAL(29, 411, 6), // "method"
QT_MOC_LITERAL(30, 418, 18), // "cancelShortcutGrab"
QT_MOC_LITERAL(31, 437, 19), // "QDBusPendingReply<>"
QT_MOC_LITERAL(32, 457, 14), // "changeShortcut"
QT_MOC_LITERAL(33, 472, 26), // "QDBusPendingReply<QString>"
QT_MOC_LITERAL(34, 499, 12), // "enableAction"
QT_MOC_LITERAL(35, 512, 23), // "QDBusPendingReply<bool>"
QT_MOC_LITERAL(36, 536, 13), // "getActionById"
QT_MOC_LITERAL(37, 550, 60), // "QDBusPendingReply<bool,QStrin..."
QT_MOC_LITERAL(38, 611, 16), // "QDBusReply<bool>"
QT_MOC_LITERAL(39, 628, 8), // "QString&"
QT_MOC_LITERAL(40, 637, 5), // "bool&"
QT_MOC_LITERAL(41, 643, 4), // "type"
QT_MOC_LITERAL(42, 648, 4), // "info"
QT_MOC_LITERAL(43, 653, 15), // "getAllActionIds"
QT_MOC_LITERAL(44, 669, 37), // "QDBusPendingReply<QList<qulon..."
QT_MOC_LITERAL(45, 707, 13), // "getAllActions"
QT_MOC_LITERAL(46, 721, 52), // "QDBusPendingReply<QMap_qulong..."
QT_MOC_LITERAL(47, 774, 23), // "getClientActionInfoById"
QT_MOC_LITERAL(48, 798, 60), // "QDBusPendingReply<bool,QStrin..."
QT_MOC_LITERAL(49, 859, 16), // "QDBusObjectPath&"
QT_MOC_LITERAL(50, 876, 21), // "getClientActionSender"
QT_MOC_LITERAL(51, 898, 24), // "getCommandActionInfoById"
QT_MOC_LITERAL(52, 923, 64), // "QDBusPendingReply<bool,QStrin..."
QT_MOC_LITERAL(53, 988, 12), // "QStringList&"
QT_MOC_LITERAL(54, 1001, 23), // "getMethodActionInfoById"
QT_MOC_LITERAL(55, 1025, 84), // "QDBusPendingReply<bool,QStrin..."
QT_MOC_LITERAL(56, 1110, 27), // "getMultipleActionsBehaviour"
QT_MOC_LITERAL(57, 1138, 23), // "QDBusPendingReply<uint>"
QT_MOC_LITERAL(58, 1162, 12), // "grabShortcut"
QT_MOC_LITERAL(59, 1175, 41), // "QDBusPendingReply<QString,boo..."
QT_MOC_LITERAL(60, 1217, 7), // "timeout"
QT_MOC_LITERAL(61, 1225, 6), // "failed"
QT_MOC_LITERAL(62, 1232, 9), // "cancelled"
QT_MOC_LITERAL(63, 1242, 8), // "timedout"
QT_MOC_LITERAL(64, 1251, 15), // "isActionEnabled"
QT_MOC_LITERAL(65, 1267, 23), // "modifyActionDescription"
QT_MOC_LITERAL(66, 1291, 19), // "modifyCommandAction"
QT_MOC_LITERAL(67, 1311, 18), // "modifyMethodAction"
QT_MOC_LITERAL(68, 1330, 4), // "quit"
QT_MOC_LITERAL(69, 1335, 9), // "Q_NOREPLY"
QT_MOC_LITERAL(70, 1345, 12), // "removeAction"
QT_MOC_LITERAL(71, 1358, 27), // "setMultipleActionsBehaviour"
QT_MOC_LITERAL(72, 1386, 11) // "swapActions"

    },
    "OrgLxqtGlobal_key_shortcutsDaemonInterface\0"
    "actionAdded\0\0id\0actionEnabled\0enabled\0"
    "actionModified\0actionRemoved\0"
    "actionShortcutChanged\0actionsSwapped\0"
    "id1\0id2\0clientActionSenderChanged\0"
    "sender\0multipleActionsBehaviourChanged\0"
    "behaviour\0addCommandAction\0"
    "QDBusPendingReply<QString,qulonglong>\0"
    "shortcut\0command\0arguments\0description\0"
    "QDBusReply<QString>\0qulonglong&\0"
    "addMethodAction\0service\0QDBusObjectPath\0"
    "path\0interface\0method\0cancelShortcutGrab\0"
    "QDBusPendingReply<>\0changeShortcut\0"
    "QDBusPendingReply<QString>\0enableAction\0"
    "QDBusPendingReply<bool>\0getActionById\0"
    "QDBusPendingReply<bool,QString,QString,bool,QString,QString>\0"
    "QDBusReply<bool>\0QString&\0bool&\0type\0"
    "info\0getAllActionIds\0"
    "QDBusPendingReply<QList<qulonglong> >\0"
    "getAllActions\0"
    "QDBusPendingReply<QMap_qulonglong_GeneralActionInfo>\0"
    "getClientActionInfoById\0"
    "QDBusPendingReply<bool,QString,QString,bool,QDBusObjectPath>\0"
    "QDBusObjectPath&\0getClientActionSender\0"
    "getCommandActionInfoById\0"
    "QDBusPendingReply<bool,QString,QString,bool,QString,QStringList>\0"
    "QStringList&\0getMethodActionInfoById\0"
    "QDBusPendingReply<bool,QString,QString,bool,QString,QDBusObjectPath,QS"
    "tring,QString>\0"
    "getMultipleActionsBehaviour\0"
    "QDBusPendingReply<uint>\0grabShortcut\0"
    "QDBusPendingReply<QString,bool,bool,bool>\0"
    "timeout\0failed\0cancelled\0timedout\0"
    "isActionEnabled\0modifyActionDescription\0"
    "modifyCommandAction\0modifyMethodAction\0"
    "quit\0Q_NOREPLY\0removeAction\0"
    "setMultipleActionsBehaviour\0swapActions"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_OrgLxqtGlobal_key_shortcutsDaemonInterface[] = {

 // content:
       8,       // revision
       0,       // classname
       0,    0, // classinfo
      37,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       8,       // signalCount

 // signals: name, argc, parameters, tag, flags
       1,    1,  199,    2, 0x06 /* Public */,
       4,    2,  202,    2, 0x06 /* Public */,
       6,    1,  207,    2, 0x06 /* Public */,
       7,    1,  210,    2, 0x06 /* Public */,
       8,    1,  213,    2, 0x06 /* Public */,
       9,    2,  216,    2, 0x06 /* Public */,
      12,    2,  221,    2, 0x06 /* Public */,
      14,    1,  226,    2, 0x06 /* Public */,

 // slots: name, argc, parameters, tag, flags
      16,    4,  229,    2, 0x0a /* Public */,
      16,    5,  238,    2, 0x0a /* Public */,
      24,    6,  249,    2, 0x0a /* Public */,
      24,    7,  262,    2, 0x0a /* Public */,
      30,    0,  277,    2, 0x0a /* Public */,
      32,    2,  278,    2, 0x0a /* Public */,
      34,    2,  283,    2, 0x0a /* Public */,
      36,    1,  288,    2, 0x0a /* Public */,
      36,    6,  291,    2, 0x0a /* Public */,
      43,    0,  304,    2, 0x0a /* Public */,
      45,    0,  305,    2, 0x0a /* Public */,
      47,    1,  306,    2, 0x0a /* Public */,
      47,    5,  309,    2, 0x0a /* Public */,
      50,    1,  320,    2, 0x0a /* Public */,
      51,    1,  323,    2, 0x0a /* Public */,
      51,    6,  326,    2, 0x0a /* Public */,
      54,    1,  339,    2, 0x0a /* Public */,
      54,    8,  342,    2, 0x0a /* Public */,
      56,    0,  359,    2, 0x0a /* Public */,
      58,    1,  360,    2, 0x0a /* Public */,
      58,    4,  363,    2, 0x0a /* Public */,
      64,    1,  372,    2, 0x0a /* Public */,
      65,    2,  375,    2, 0x0a /* Public */,
      66,    4,  380,    2, 0x0a /* Public */,
      67,    6,  389,    2, 0x0a /* Public */,
      68,    0,  402,   69, 0x0a /* Public */,
      70,    1,  403,    2, 0x0a /* Public */,
      71,    1,  406,    2, 0x0a /* Public */,
      72,    2,  409,    2, 0x0a /* Public */,

 // signals: parameters
    QMetaType::Void, QMetaType::ULongLong,    3,
    QMetaType::Void, QMetaType::ULongLong, QMetaType::Bool,    3,    5,
    QMetaType::Void, QMetaType::ULongLong,    3,
    QMetaType::Void, QMetaType::ULongLong,    3,
    QMetaType::Void, QMetaType::ULongLong,    3,
    QMetaType::Void, QMetaType::ULongLong, QMetaType::ULongLong,   10,   11,
    QMetaType::Void, QMetaType::ULongLong, QMetaType::QString,    3,   13,
    QMetaType::Void, QMetaType::UInt,   15,

 // slots: parameters
    0x80000000 | 17, QMetaType::QString, QMetaType::QString, QMetaType::QStringList, QMetaType::QString,   18,   19,   20,   21,
    0x80000000 | 22, QMetaType::QString, QMetaType::QString, QMetaType::QStringList, QMetaType::QString, 0x80000000 | 23,   18,   19,   20,   21,    3,
    0x80000000 | 17, QMetaType::QString, QMetaType::QString, 0x80000000 | 26, QMetaType::QString, QMetaType::QString, QMetaType::QString,   18,   25,   27,   28,   29,   21,
    0x80000000 | 22, QMetaType::QString, QMetaType::QString, 0x80000000 | 26, QMetaType::QString, QMetaType::QString, QMetaType::QString, 0x80000000 | 23,   18,   25,   27,   28,   29,   21,    3,
    0x80000000 | 31,
    0x80000000 | 33, QMetaType::ULongLong, QMetaType::QString,    3,   18,
    0x80000000 | 35, QMetaType::ULongLong, QMetaType::Bool,    3,    5,
    0x80000000 | 37, QMetaType::ULongLong,    3,
    0x80000000 | 38, QMetaType::ULongLong, 0x80000000 | 39, 0x80000000 | 39, 0x80000000 | 40, 0x80000000 | 39, 0x80000000 | 39,    3,   18,   21,    5,   41,   42,
    0x80000000 | 44,
    0x80000000 | 46,
    0x80000000 | 48, QMetaType::ULongLong,    3,
    0x80000000 | 38, QMetaType::ULongLong, 0x80000000 | 39, 0x80000000 | 39, 0x80000000 | 40, 0x80000000 | 49,    3,   18,   21,    5,   27,
    0x80000000 | 33, QMetaType::ULongLong,    3,
    0x80000000 | 52, QMetaType::ULongLong,    3,
    0x80000000 | 38, QMetaType::ULongLong, 0x80000000 | 39, 0x80000000 | 39, 0x80000000 | 40, 0x80000000 | 39, 0x80000000 | 53,    3,   18,   21,    5,   19,   20,
    0x80000000 | 55, QMetaType::ULongLong,    3,
    0x80000000 | 38, QMetaType::ULongLong, 0x80000000 | 39, 0x80000000 | 39, 0x80000000 | 40, 0x80000000 | 39, 0x80000000 | 49, 0x80000000 | 39, 0x80000000 | 39,    3,   18,   21,    5,   25,   27,   28,   29,
    0x80000000 | 57,
    0x80000000 | 59, QMetaType::UInt,   60,
    0x80000000 | 22, QMetaType::UInt, 0x80000000 | 40, 0x80000000 | 40, 0x80000000 | 40,   60,   61,   62,   63,
    0x80000000 | 35, QMetaType::ULongLong,    3,
    0x80000000 | 35, QMetaType::ULongLong, QMetaType::QString,    3,   21,
    0x80000000 | 35, QMetaType::ULongLong, QMetaType::QString, QMetaType::QStringList, QMetaType::QString,    3,   19,   20,   21,
    0x80000000 | 35, QMetaType::ULongLong, QMetaType::QString, 0x80000000 | 26, QMetaType::QString, QMetaType::QString, QMetaType::QString,    3,   25,   27,   28,   29,   21,
    QMetaType::Void,
    0x80000000 | 35, QMetaType::ULongLong,    3,
    0x80000000 | 35, QMetaType::UInt,   15,
    0x80000000 | 35, QMetaType::ULongLong, QMetaType::ULongLong,   10,   11,

       0        // eod
};

void OrgLxqtGlobal_key_shortcutsDaemonInterface::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<OrgLxqtGlobal_key_shortcutsDaemonInterface *>(_o);
        (void)_t;
        switch (_id) {
        case 0: _t->actionAdded((*reinterpret_cast< qulonglong(*)>(_a[1]))); break;
        case 1: _t->actionEnabled((*reinterpret_cast< qulonglong(*)>(_a[1])),(*reinterpret_cast< bool(*)>(_a[2]))); break;
        case 2: _t->actionModified((*reinterpret_cast< qulonglong(*)>(_a[1]))); break;
        case 3: _t->actionRemoved((*reinterpret_cast< qulonglong(*)>(_a[1]))); break;
        case 4: _t->actionShortcutChanged((*reinterpret_cast< qulonglong(*)>(_a[1]))); break;
        case 5: _t->actionsSwapped((*reinterpret_cast< qulonglong(*)>(_a[1])),(*reinterpret_cast< qulonglong(*)>(_a[2]))); break;
        case 6: _t->clientActionSenderChanged((*reinterpret_cast< qulonglong(*)>(_a[1])),(*reinterpret_cast< const QString(*)>(_a[2]))); break;
        case 7: _t->multipleActionsBehaviourChanged((*reinterpret_cast< uint(*)>(_a[1]))); break;
        case 8: { QDBusPendingReply<QString,qulonglong> _r = _t->addCommandAction((*reinterpret_cast< const QString(*)>(_a[1])),(*reinterpret_cast< const QString(*)>(_a[2])),(*reinterpret_cast< const QStringList(*)>(_a[3])),(*reinterpret_cast< const QString(*)>(_a[4])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<QString,qulonglong>*>(_a[0]) = std::move(_r); }  break;
        case 9: { QDBusReply<QString> _r = _t->addCommandAction((*reinterpret_cast< const QString(*)>(_a[1])),(*reinterpret_cast< const QString(*)>(_a[2])),(*reinterpret_cast< const QStringList(*)>(_a[3])),(*reinterpret_cast< const QString(*)>(_a[4])),(*reinterpret_cast< qulonglong(*)>(_a[5])));
            if (_a[0]) *reinterpret_cast< QDBusReply<QString>*>(_a[0]) = std::move(_r); }  break;
        case 10: { QDBusPendingReply<QString,qulonglong> _r = _t->addMethodAction((*reinterpret_cast< const QString(*)>(_a[1])),(*reinterpret_cast< const QString(*)>(_a[2])),(*reinterpret_cast< const QDBusObjectPath(*)>(_a[3])),(*reinterpret_cast< const QString(*)>(_a[4])),(*reinterpret_cast< const QString(*)>(_a[5])),(*reinterpret_cast< const QString(*)>(_a[6])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<QString,qulonglong>*>(_a[0]) = std::move(_r); }  break;
        case 11: { QDBusReply<QString> _r = _t->addMethodAction((*reinterpret_cast< const QString(*)>(_a[1])),(*reinterpret_cast< const QString(*)>(_a[2])),(*reinterpret_cast< const QDBusObjectPath(*)>(_a[3])),(*reinterpret_cast< const QString(*)>(_a[4])),(*reinterpret_cast< const QString(*)>(_a[5])),(*reinterpret_cast< const QString(*)>(_a[6])),(*reinterpret_cast< qulonglong(*)>(_a[7])));
            if (_a[0]) *reinterpret_cast< QDBusReply<QString>*>(_a[0]) = std::move(_r); }  break;
        case 12: { QDBusPendingReply<> _r = _t->cancelShortcutGrab();
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<>*>(_a[0]) = std::move(_r); }  break;
        case 13: { QDBusPendingReply<QString> _r = _t->changeShortcut((*reinterpret_cast< qulonglong(*)>(_a[1])),(*reinterpret_cast< const QString(*)>(_a[2])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<QString>*>(_a[0]) = std::move(_r); }  break;
        case 14: { QDBusPendingReply<bool> _r = _t->enableAction((*reinterpret_cast< qulonglong(*)>(_a[1])),(*reinterpret_cast< bool(*)>(_a[2])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<bool>*>(_a[0]) = std::move(_r); }  break;
        case 15: { QDBusPendingReply<bool,QString,QString,bool,QString,QString> _r = _t->getActionById((*reinterpret_cast< qulonglong(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<bool,QString,QString,bool,QString,QString>*>(_a[0]) = std::move(_r); }  break;
        case 16: { QDBusReply<bool> _r = _t->getActionById((*reinterpret_cast< qulonglong(*)>(_a[1])),(*reinterpret_cast< QString(*)>(_a[2])),(*reinterpret_cast< QString(*)>(_a[3])),(*reinterpret_cast< bool(*)>(_a[4])),(*reinterpret_cast< QString(*)>(_a[5])),(*reinterpret_cast< QString(*)>(_a[6])));
            if (_a[0]) *reinterpret_cast< QDBusReply<bool>*>(_a[0]) = std::move(_r); }  break;
        case 17: { QDBusPendingReply<QList<qulonglong> > _r = _t->getAllActionIds();
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<QList<qulonglong> >*>(_a[0]) = std::move(_r); }  break;
        case 18: { QDBusPendingReply<QMap_qulonglong_GeneralActionInfo> _r = _t->getAllActions();
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<QMap_qulonglong_GeneralActionInfo>*>(_a[0]) = std::move(_r); }  break;
        case 19: { QDBusPendingReply<bool,QString,QString,bool,QDBusObjectPath> _r = _t->getClientActionInfoById((*reinterpret_cast< qulonglong(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<bool,QString,QString,bool,QDBusObjectPath>*>(_a[0]) = std::move(_r); }  break;
        case 20: { QDBusReply<bool> _r = _t->getClientActionInfoById((*reinterpret_cast< qulonglong(*)>(_a[1])),(*reinterpret_cast< QString(*)>(_a[2])),(*reinterpret_cast< QString(*)>(_a[3])),(*reinterpret_cast< bool(*)>(_a[4])),(*reinterpret_cast< QDBusObjectPath(*)>(_a[5])));
            if (_a[0]) *reinterpret_cast< QDBusReply<bool>*>(_a[0]) = std::move(_r); }  break;
        case 21: { QDBusPendingReply<QString> _r = _t->getClientActionSender((*reinterpret_cast< qulonglong(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<QString>*>(_a[0]) = std::move(_r); }  break;
        case 22: { QDBusPendingReply<bool,QString,QString,bool,QString,QStringList> _r = _t->getCommandActionInfoById((*reinterpret_cast< qulonglong(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<bool,QString,QString,bool,QString,QStringList>*>(_a[0]) = std::move(_r); }  break;
        case 23: { QDBusReply<bool> _r = _t->getCommandActionInfoById((*reinterpret_cast< qulonglong(*)>(_a[1])),(*reinterpret_cast< QString(*)>(_a[2])),(*reinterpret_cast< QString(*)>(_a[3])),(*reinterpret_cast< bool(*)>(_a[4])),(*reinterpret_cast< QString(*)>(_a[5])),(*reinterpret_cast< QStringList(*)>(_a[6])));
            if (_a[0]) *reinterpret_cast< QDBusReply<bool>*>(_a[0]) = std::move(_r); }  break;
        case 24: { QDBusPendingReply<bool,QString,QString,bool,QString,QDBusObjectPath,QString,QString> _r = _t->getMethodActionInfoById((*reinterpret_cast< qulonglong(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<bool,QString,QString,bool,QString,QDBusObjectPath,QString,QString>*>(_a[0]) = std::move(_r); }  break;
        case 25: { QDBusReply<bool> _r = _t->getMethodActionInfoById((*reinterpret_cast< qulonglong(*)>(_a[1])),(*reinterpret_cast< QString(*)>(_a[2])),(*reinterpret_cast< QString(*)>(_a[3])),(*reinterpret_cast< bool(*)>(_a[4])),(*reinterpret_cast< QString(*)>(_a[5])),(*reinterpret_cast< QDBusObjectPath(*)>(_a[6])),(*reinterpret_cast< QString(*)>(_a[7])),(*reinterpret_cast< QString(*)>(_a[8])));
            if (_a[0]) *reinterpret_cast< QDBusReply<bool>*>(_a[0]) = std::move(_r); }  break;
        case 26: { QDBusPendingReply<uint> _r = _t->getMultipleActionsBehaviour();
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<uint>*>(_a[0]) = std::move(_r); }  break;
        case 27: { QDBusPendingReply<QString,bool,bool,bool> _r = _t->grabShortcut((*reinterpret_cast< uint(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<QString,bool,bool,bool>*>(_a[0]) = std::move(_r); }  break;
        case 28: { QDBusReply<QString> _r = _t->grabShortcut((*reinterpret_cast< uint(*)>(_a[1])),(*reinterpret_cast< bool(*)>(_a[2])),(*reinterpret_cast< bool(*)>(_a[3])),(*reinterpret_cast< bool(*)>(_a[4])));
            if (_a[0]) *reinterpret_cast< QDBusReply<QString>*>(_a[0]) = std::move(_r); }  break;
        case 29: { QDBusPendingReply<bool> _r = _t->isActionEnabled((*reinterpret_cast< qulonglong(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<bool>*>(_a[0]) = std::move(_r); }  break;
        case 30: { QDBusPendingReply<bool> _r = _t->modifyActionDescription((*reinterpret_cast< qulonglong(*)>(_a[1])),(*reinterpret_cast< const QString(*)>(_a[2])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<bool>*>(_a[0]) = std::move(_r); }  break;
        case 31: { QDBusPendingReply<bool> _r = _t->modifyCommandAction((*reinterpret_cast< qulonglong(*)>(_a[1])),(*reinterpret_cast< const QString(*)>(_a[2])),(*reinterpret_cast< const QStringList(*)>(_a[3])),(*reinterpret_cast< const QString(*)>(_a[4])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<bool>*>(_a[0]) = std::move(_r); }  break;
        case 32: { QDBusPendingReply<bool> _r = _t->modifyMethodAction((*reinterpret_cast< qulonglong(*)>(_a[1])),(*reinterpret_cast< const QString(*)>(_a[2])),(*reinterpret_cast< const QDBusObjectPath(*)>(_a[3])),(*reinterpret_cast< const QString(*)>(_a[4])),(*reinterpret_cast< const QString(*)>(_a[5])),(*reinterpret_cast< const QString(*)>(_a[6])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<bool>*>(_a[0]) = std::move(_r); }  break;
        case 33: _t->quit(); break;
        case 34: { QDBusPendingReply<bool> _r = _t->removeAction((*reinterpret_cast< qulonglong(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<bool>*>(_a[0]) = std::move(_r); }  break;
        case 35: { QDBusPendingReply<bool> _r = _t->setMultipleActionsBehaviour((*reinterpret_cast< uint(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<bool>*>(_a[0]) = std::move(_r); }  break;
        case 36: { QDBusPendingReply<bool> _r = _t->swapActions((*reinterpret_cast< qulonglong(*)>(_a[1])),(*reinterpret_cast< qulonglong(*)>(_a[2])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<bool>*>(_a[0]) = std::move(_r); }  break;
        default: ;
        }
    } else if (_c == QMetaObject::IndexOfMethod) {
        int *result = reinterpret_cast<int *>(_a[0]);
        {
            using _t = void (OrgLxqtGlobal_key_shortcutsDaemonInterface::*)(qulonglong );
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&OrgLxqtGlobal_key_shortcutsDaemonInterface::actionAdded)) {
                *result = 0;
                return;
            }
        }
        {
            using _t = void (OrgLxqtGlobal_key_shortcutsDaemonInterface::*)(qulonglong , bool );
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&OrgLxqtGlobal_key_shortcutsDaemonInterface::actionEnabled)) {
                *result = 1;
                return;
            }
        }
        {
            using _t = void (OrgLxqtGlobal_key_shortcutsDaemonInterface::*)(qulonglong );
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&OrgLxqtGlobal_key_shortcutsDaemonInterface::actionModified)) {
                *result = 2;
                return;
            }
        }
        {
            using _t = void (OrgLxqtGlobal_key_shortcutsDaemonInterface::*)(qulonglong );
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&OrgLxqtGlobal_key_shortcutsDaemonInterface::actionRemoved)) {
                *result = 3;
                return;
            }
        }
        {
            using _t = void (OrgLxqtGlobal_key_shortcutsDaemonInterface::*)(qulonglong );
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&OrgLxqtGlobal_key_shortcutsDaemonInterface::actionShortcutChanged)) {
                *result = 4;
                return;
            }
        }
        {
            using _t = void (OrgLxqtGlobal_key_shortcutsDaemonInterface::*)(qulonglong , qulonglong );
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&OrgLxqtGlobal_key_shortcutsDaemonInterface::actionsSwapped)) {
                *result = 5;
                return;
            }
        }
        {
            using _t = void (OrgLxqtGlobal_key_shortcutsDaemonInterface::*)(qulonglong , const QString & );
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&OrgLxqtGlobal_key_shortcutsDaemonInterface::clientActionSenderChanged)) {
                *result = 6;
                return;
            }
        }
        {
            using _t = void (OrgLxqtGlobal_key_shortcutsDaemonInterface::*)(uint );
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&OrgLxqtGlobal_key_shortcutsDaemonInterface::multipleActionsBehaviourChanged)) {
                *result = 7;
                return;
            }
        }
    }
}

QT_INIT_METAOBJECT const QMetaObject OrgLxqtGlobal_key_shortcutsDaemonInterface::staticMetaObject = { {
    QMetaObject::SuperData::link<QDBusAbstractInterface::staticMetaObject>(),
    qt_meta_stringdata_OrgLxqtGlobal_key_shortcutsDaemonInterface.data,
    qt_meta_data_OrgLxqtGlobal_key_shortcutsDaemonInterface,
    qt_static_metacall,
    nullptr,
    nullptr
} };


const QMetaObject *OrgLxqtGlobal_key_shortcutsDaemonInterface::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *OrgLxqtGlobal_key_shortcutsDaemonInterface::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_OrgLxqtGlobal_key_shortcutsDaemonInterface.stringdata0))
        return static_cast<void*>(this);
    return QDBusAbstractInterface::qt_metacast(_clname);
}

int OrgLxqtGlobal_key_shortcutsDaemonInterface::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QDBusAbstractInterface::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 37)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 37;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 37)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 37;
    }
    return _id;
}

// SIGNAL 0
void OrgLxqtGlobal_key_shortcutsDaemonInterface::actionAdded(qulonglong _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(std::addressof(_t1))) };
    QMetaObject::activate(this, &staticMetaObject, 0, _a);
}

// SIGNAL 1
void OrgLxqtGlobal_key_shortcutsDaemonInterface::actionEnabled(qulonglong _t1, bool _t2)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(std::addressof(_t1))), const_cast<void*>(reinterpret_cast<const void*>(std::addressof(_t2))) };
    QMetaObject::activate(this, &staticMetaObject, 1, _a);
}

// SIGNAL 2
void OrgLxqtGlobal_key_shortcutsDaemonInterface::actionModified(qulonglong _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(std::addressof(_t1))) };
    QMetaObject::activate(this, &staticMetaObject, 2, _a);
}

// SIGNAL 3
void OrgLxqtGlobal_key_shortcutsDaemonInterface::actionRemoved(qulonglong _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(std::addressof(_t1))) };
    QMetaObject::activate(this, &staticMetaObject, 3, _a);
}

// SIGNAL 4
void OrgLxqtGlobal_key_shortcutsDaemonInterface::actionShortcutChanged(qulonglong _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(std::addressof(_t1))) };
    QMetaObject::activate(this, &staticMetaObject, 4, _a);
}

// SIGNAL 5
void OrgLxqtGlobal_key_shortcutsDaemonInterface::actionsSwapped(qulonglong _t1, qulonglong _t2)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(std::addressof(_t1))), const_cast<void*>(reinterpret_cast<const void*>(std::addressof(_t2))) };
    QMetaObject::activate(this, &staticMetaObject, 5, _a);
}

// SIGNAL 6
void OrgLxqtGlobal_key_shortcutsDaemonInterface::clientActionSenderChanged(qulonglong _t1, const QString & _t2)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(std::addressof(_t1))), const_cast<void*>(reinterpret_cast<const void*>(std::addressof(_t2))) };
    QMetaObject::activate(this, &staticMetaObject, 6, _a);
}

// SIGNAL 7
void OrgLxqtGlobal_key_shortcutsDaemonInterface::multipleActionsBehaviourChanged(uint _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(std::addressof(_t1))) };
    QMetaObject::activate(this, &staticMetaObject, 7, _a);
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
